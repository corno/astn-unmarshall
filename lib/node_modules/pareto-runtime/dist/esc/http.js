"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doHTTPRequest = void 0;
var http = __importStar(require("http"));
function doHTTPRequest($, $p) {
    var request = http.request({
        host: $.host,
        path: $.path,
        timeout: $.timeout,
    }, function (res) {
        if (res.statusCode !== 200) {
            $p.onNotFound();
        }
        else {
            var streamConsumer_1 = $p.onSuccess();
            //below code is streaming but unstable
            // onSucces(p20.createStream((_limiter, consumer) => {
            //     res.on('data', chunk => {
            //         res.pause()
            //         consumer.onData(chunk.toString()).handle(
            //             _abortRequested => {
            //                 res.resume()
            //             }
            //         )
            //     })
            //     res.on('end', () => {
            //         consumer.onEnd(false, null)
            //     })
            // }))
            res.on('data', function (chunk) {
                streamConsumer_1.onData(chunk.toString());
            });
            res.on('end', function () {
                streamConsumer_1.onEnd(null);
            });
        }
    });
    request.on('timeout', function () {
        $p.onTimeout();
    });
    request.on('error', function (e) {
        $p.onError(e.message);
    });
    request.end();
}
exports.doHTTPRequest = doHTTPRequest;
