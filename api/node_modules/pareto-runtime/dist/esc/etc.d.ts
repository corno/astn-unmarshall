export declare function logError(message: string): void;
export declare function logWarning(message: string): void;
export declare function log(message: string): void;
export declare function trimRight(str: string): string;
export declare function JSONstringify(o: any): string;
export declare function JSONparse(str: string): any;
export declare function StringFromCharCode(charCode: number): string;
export declare function Objectkeys(o: Object): string[];
export declare function forEachEntry<T>(dictionary: {
    [key: string]: T;
}, callback: (entry: T, key: string) => void): void;
export declare function encodeURI(uri: string): string;
export declare function parseInt(str: string, radix: number): number;
export declare function stringIsNaN(str: string): boolean;
export declare function escapeString($: {
    str: string;
    escapeTabsAndNewLines: boolean;
    wrapperToEscape: string | null;
}): string;
export declare function getElement<T>(array: T[], index: number): T;
/**
 * au means 'assert unreachable'. Used in the 'default' clause of while statements to ensure that
 * all possible cases have been handled
 * @param _x
 */
export declare function au<RT>(_x: never): RT;
/**
 * cc means 'change context'. It creates a new scope in which a variable name can be used again
 * (usually '$', a variable name that indicates the current context in pareto)
 *
 * @param input
 * @param callback
 * @returns
 */
export declare function cc<T, RT>(input: T, callback: (output: T) => RT): RT;
