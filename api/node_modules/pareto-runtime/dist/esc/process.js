"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processExit = exports.createStdErr = exports.createStdOut = exports.subscribeToProcessBeforeExit = exports.subscribeToStdIn = exports.runProgram = void 0;
var stream = __importStar(require("stream"));
function runProgram($i) {
    var pa = process.argv;
    // let isDone = false
    // process.on("beforeExit", () => {
    //     if (!isDone) {
    //         throw new Error("process did not terminate properly, isDone() is never called")
    //     }
    // })
    if (pa.length > 3) { //expected format is 'node <scriptname> <argument>'
        console.error("expecting either 0 or 1 argument, not more");
        processExit(1);
    }
    else {
        $i({
            argument: pa[2],
        });
    }
}
exports.runProgram = runProgram;
function subscribeToStdIn(ssp) {
    process.stdin.setEncoding("utf-8");
    process.stdin.pipe(new stream.Writable({
        defaultEncoding: "utf-8",
        write: function (data, _encoding, callback) {
            //eslint-disable-next-line
            ssp.onData(data.toString());
            callback();
        },
    })).on('finish', function () {
        ssp.onEnd(null);
    });
}
exports.subscribeToStdIn = subscribeToStdIn;
function subscribeToProcessBeforeExit($i) {
    process.on("beforeExit", function ($) {
        $i($);
    });
}
exports.subscribeToProcessBeforeExit = subscribeToProcessBeforeExit;
function createStdOut() {
    return {
        write: function (str) {
            process.stdout.write(str);
        },
    };
}
exports.createStdOut = createStdOut;
function createStdErr() {
    return {
        write: function (str) {
            process.stderr.write(str);
        },
    };
}
exports.createStdErr = createStdErr;
function processExit(code) {
    process.exit(code);
}
exports.processExit = processExit;
